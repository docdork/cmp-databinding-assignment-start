{"ast":null,"code":"var _class;\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { EventEmitter } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nexport class GameControlComponent {\n  constructor() {\n    this.intervalDone = new EventEmitter();\n    this.lastNumber = 0;\n  }\n  startGame() {\n    this.interval = setInterval(() => {\n      this.intervalDone.emit(this.lastNumber + 1);\n      this.lastNumber++;\n    }, 1000);\n  }\n}\n_class = GameControlComponent;\n_class.ɵfac = function GameControlComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-game-control\"]],\n  decls: 4,\n  vars: 0,\n  consts: [[1, \"btn\", \"btn-success\", 3, \"click\"], [1, \"btn\", \"btn-danger\"]],\n  template: function GameControlComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function GameControlComponent_Template_button_click_0_listener() {\n        return ctx.startGame();\n      });\n      i0.ɵɵtext(1, \"Start\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"button\", 1);\n      i0.ɵɵtext(3, \"Stop\");\n      i0.ɵɵelementEnd();\n    }\n  }\n});\n__decorate([Output, __metadata(\"design:type\", Object)], GameControlComponent.prototype, \"intervalDone\", void 0);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}