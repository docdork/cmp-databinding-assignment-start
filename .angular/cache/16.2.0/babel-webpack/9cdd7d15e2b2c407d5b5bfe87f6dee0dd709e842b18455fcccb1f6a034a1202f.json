{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  var _class;\n  class AppComponent {}\n  _class = AppComponent;\n  _class.ɵfac = function AppComponent_Factory(t) {\n    return new (t || _class)();\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-root\"]],\n    decls: 23,\n    vars: 0,\n    consts: [[1, \"container\"], [1, \"row\"], [1, \"jumbotron\", \"jumbotron-fluid\"], [1, \"alert\", \"alert-primary\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 3);\n        i0.ɵɵtext(5, \"Bind it!\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"ol\")(7, \"li\");\n        i0.ɵɵtext(8, \"Create three new components: GameControl, Odd and Even\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"li\");\n        i0.ɵɵtext(10, \" The GameControl Component should have buttons to start and stop the game \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"li\");\n        i0.ɵɵtext(12, \" When starting the game, an event (holding a incrementing number) should get emitted each second (ref = setInterval()) \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"li\");\n        i0.ɵɵtext(14, \"The event should be listenable from outside the component\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"li\");\n        i0.ɵɵtext(16, \" When stopping the game, no more events should get emitted (clearInterval(ref)) \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"li\");\n        i0.ɵɵtext(18, \" A new Odd component should get created for every odd number emitted, the same should happen for the Even Component (on even numbers) \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"li\");\n        i0.ɵɵtext(20, \" Simply output Odd - NUMBER or Even - NUMBER in the two components \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"li\");\n        i0.ɵɵtext(22, \" Style the element (e.g. paragraph) holding your output text differently in both components \");\n        i0.ɵɵelementEnd()()()()();\n      }\n    }\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}